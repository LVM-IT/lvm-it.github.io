{
  "name": "LVM-IT RoCA vs. SPA - German",
  "tagline": "SPA RoCA",
  "body": "# Anforderungen\r\n## Einleitung\r\n\r\nUm das Jahr 2000 hat die LVM Versicherung ein neues Außendienst-System entworfen, welches zur Akquise und Kundenstammdatenverwaltung im Sinne einer Customer Relationship Management-Anwendung (CRM) eingesetzt wird. Es wurde entschieden, das System sowohl auf Server- als auch auf Client-Seite in Java zu implementieren. Der Client wurde mit der Java Swing-Bibliothek als Thin-Client entwickelt. Dieser wurde so implementiert, dass Views im Client definiert werden während die Befüllung und jegliche Interaktion vom Server aus gesteuert wird. Somit ist im Client weder Businesslogik noch Anwendungslogik enthalten.\r\n\r\nDie einzelnen Anwendungen in dem System (z.B. Produkt-Anwendung und Inkasso-Anwendung) sind dabei über die Oberfläche sowie über Backend-Aufrufe miteinander verknüpft. Dieses System wird aktuell als Monolith freigegeben und erzeugt dadurch starke Abhängigkeiten zwischen den Entwicklungsteams. Die Fachlogik aus dem System wird in REST- und asynchronen (Batch sowie Einzelsatz) Anwendungen wiederverwendet.\r\n\r\nDas System ist über die Jahre weiter gewachsen: Es wurde insbesondere um Vertrags- und Schaden-Anwendungen für Innendienstsachbearbeiter erweitert und ist heute zentrales Arbeitsinstrument vieler Mitarbeiter im Innen- und Außendienst. Zukünftig werden weitere Altanwendungen in dieses System migriert.\r\n\r\nAktuell wird untersucht, welche Alternativen es zu der aktuellen Oberfläche gibt und welche für die LVM Versicherung geeignet ist. Dabei wurde der Fokus auf browserbasierte Oberflächen gelegt, da desktopbasierte native Bibliotheken zukünftige Plattformwechsel erschweren würden. Aktuell verwendet die LVM Versicherung ein auf Ubuntu basierendes Client-Betriebssystem.\r\n\r\nUm diese Alternativen zu betrachten, wurden die Architekturen Single-Page-Application (SPA) und Resource-oriented Client Architecture (RoCA) untersucht. SPA erzeugt auf der Client-Seite HTML, während ROCA dies ausschließlich auf der Server-Seite tut. Es gibt noch weitere Architekturen der serverseitigen HTML-Erzeugung, wie zustandsbehaftete komponenten-basierte Systeme (z.B. JavaServerFaces). Diese haben den Nachteil, dass sie durch nicht persistente Sitzungs-Daten schlechter skalierbar und in Cloud-Umgebungen nicht einsetzbar sind. Daher wurden diese ausgeschlossen.\r\n\r\nFür die genauere Betrachtung wurden die Firmen innoq (RoCA) und thinktecture (SPA) beauftragt, Prototypen zu entwickeln, die die nachfolgend beschriebenen Anforderungen und UseCases abdecken.\r\n\r\n## Entwickler von innoQ\r\n* [Lukas Dohmen](https://twitter.com/moonbeamlabs)\r\n* [Marc Jansing](https://twitter.com/marcjansing)\r\n\r\n## Entwickler von thinktecture\r\n* [Thorsten Hans](https://twitter.com/ThorstenHans)\r\n* [Manuel Rauber](https://twitter.com/ManuelRauber)\r\n\r\n#Ziel der Veröffentlichung auf github\r\n\r\nNach der erfolgten Umsetzung der beiden Prototypen wollen wir diese hiermit der Allgemeinheit zur Verfügung stellen, um eine öffentliche Diskussion über die Vor- und Nachteile beider Architekturen anzustoßen.\r\n\r\nMit welchen Fragestellungen beschäftigen wir uns?\r\n\r\n* Für welche Anforderungen kann welche Architektur eingesetzt werden? (Content-basierte Seiten, native Anbindung, Mobiler Einsatz,...)\r\n* Welche Architektur ist langfristig tragfähig?\r\n* Ist eine Architektur für eine große Gruppe von Entwicklern besser geeignet? (Produktivität, Skill, Organisation, Schnittstellen,...)\r\n* Welche Architektur lässt sich besser modularisieren?  Wichtig ist dabei, dass die Anwendung weiterhin komfortabel integriert sind?\r\n\r\n## Rahmenbedingungen\r\nDa wir vorwiegend die Clientarchitektur untersuchen möchten, haben wir die fachlichen Services als [Backend-Mock](https://github.com/LVM-IT/prototype-backend) in Form von REST-Services bereitgestellt.\r\nDas Einsatzgebiet der Anwendung konzentriert sich auf die von der LVM vorgegebene Infrastruktur. Daher reicht es aus, einen Browser (z.Z. Firefox) zu unterstützen.  \r\n\r\n## Fachliche Anfoderungen\r\n[Fachliche Darstellung](https://github.com/unicorn.png)\r\nDie Anwendung soll kundenzentriert aufgebaut sein, wie in einem CRM. Darunter verstehen wir, dass die Anwendung alle Informationen zu dem Kunden anzeigen soll. Aus der Kundenübersicht soll der Vertreter oder Innendienst-Mitarbeiter in die einzelnen Versicherungsprodukte verzweigen, sieht dabei jedoch weiterhin die allgemeinen Daten des Kunden.\r\n\r\nDie einzelnen Anwendungen sollen fachlich verknüpft sein, wie z.B. das Angebots-/Antragssystem mit dem Vertragssystem. Auf Grund dessen soll eine einfache Interaktion zwischen den Anwendungen möglich sein, d.h. der Sprung z.B. aus dem Vertrag in dazugehörige Schäden oder die Anzeige von Schadeninformationen innerhalb der Vertragsübersicht soll realisierbar sein.\r\n\r\nDurch die **Integration** verschiedener fachlicher Anwendungen wirkt die Gesamtanwendung gut bedienbar und somit komfortabel.  Neben den kundenzentrierten Anwendungen gibt es einzelne unabhängige Anwendungen (wie z.B. Finanzrechner), die ebenso leicht erreichbar sein müssen. Die Integration ist hier durch eine sehr dünne Kopplung an der Oberfläche möglich.\r\n\r\nDie **Komplexität der Formulare** umfasst eine Vielzahl von Attributen und mehrere Struktur-Ebenen (1:n:m...), die in der Oberfläche abgebildet werden sollen. Die Schwierigkeit besteht darin, eine umfangreiche und komplexe Struktur einfach und verständlich darzustellen und das Maximum an Bedienbarkeit zu gewährleisten.\r\n\r\nIn der Bearbeitung von Vorgängen (z.B. Angebotserstellung) kann es durch Kundenkontakt (Anruf oder persönlich in der Agentur) zu Unterbrechungen kommen. Deshalb soll der aktuelle Vorgang zur Seite gelegt, der Kunde bedient und anschließend mit dem vorherigen Vorgang fortgefahren werden können. Ebenso sollte es möglich sein, bestimmte Formulare parallel bearbeiten zu können (z.B. mehrere Angebotsvarianten, die man dem Kunden vorstellt). Der Wechsel  zwischen den Formularen soll schnell und einfach funktionieren, außerdem sollte der Überblick über alle geöffneten Formulare vorhanden sein.\r\n\r\n\r\n## Technische Anforderungen\r\nAnwendungen insbesondere im Innendienst bestehen aus vielen Formulardaten, die vom Sachbearbeiter verarbeitet werden. In der Regel werden die Formulardaten bearbeitet, automatisch geprüft und gesichert. Neben den Formularen werden Wizards zur geführten Eingabe verwendet. Diese umfangreichen und z.T. komplexen Formulare sollen in den Prototypen abgebildet werden.\r\n\r\nDie UseCases des Innendienstes sind primär **prozessorientiert** und werden mittels einer Aufgabenliste durch den Sachbearbeiter angestoßen bzw. abgearbeitet. Daher haben wir im nachfolgenden Absatz die UseCases mit Formularen, Wizard und einer Aufgabenliste formuliert. Das prozessorientierte Vorgehen zeigt sich darin, dass z.B. der Sachbearbeiter seine Aufgabenliste (Briefkasten) aufruft und dort einen einzelnen Eintrag öffnet. Von dort kann er in den Bezug (z.B. Vertrag oder Schaden) verzweigen und ihn ggf. dort bearbeiten. Nach der Bearbeitung wird dieser Bezug geschlossen und die Aufgabenliste wird wieder angezeigt. Dieser Prozess kann mehrere Ebenen haben (z.B. Aufgabenliste -> Vertrag -> Schaden), was im Prototypen abgebildet werden soll.\r\n\r\nFormularfelder haben teilweise fachliche Abhängigkeiten untereinander: z.B. müssen bei der Veränderung eines beitragsrelevanten Feldes alle Ergebnisfelder abgelöscht werden. Dies soll clientseitig direkt ausgeführt werden.\r\n\r\nDurch die Erfahrung der immer größer werdenden Gesamtanwendung und dem monolithischen System soll das zukünftige System **modular** aufgebaut werden, d.h. dass einzelne Anwendungsteile (Schaden, Vertrag, Briefkasten) losgelöst von einander betrieben und deployed werden. Trotz dieser Modularisierung soll eine Integration möglich sein, wobei dies ein **einfacher Link** oder eine eingebundene **Komponente** sein kann. Eine Wiederverwendung von Komponenten soll ermöglicht werden (z.B. Berufsauswahl muss übergreifend zur Verfügung gestellt werden).\r\n\r\nUm eine große Anzahl an Oberflächen produzieren zu können, soll ein einheitliches Layout mit zentral bereitgestellten GUI-Komponenten realisiert werden können. Diese Komponenten sollen einfach einzusetzen und leicht erweiterbar sein.\r\n\r\nDa die Anwendung auch im Vertrieb verwendet wird, soll sie mit** geringer Bandbreite** und **hoher Latenz** auskommen und trotzdem eine ausreichende UserExperience (UX) bieten.\r\n\r\nZukünftig wollen wir den Browser als Laufzeitumgebung unserer Anwendungen verwenden und deshalb sollen die nativen Funktionen, wie dauerhafte URLs, Vor- und Zurück-Navigation und Tabs verwendet werden.\r\n\r\n## UseCases\r\nMit den UseCases wollen wir die grundlegenden Anforderungen abbilden. Diese müssen durch folgende Anwendungen in eigenen Modulen umgesetzt werden: Kundensuche und Kundenübersicht (Rahmenanwendung), Aufgabenliste (modulare Anwendung), Brieferzeugung (Wizard), Berufsauswahl (modulare Komponente), Schaden (modulare Anwendung) \r\n\r\n### UseCase 1: \"Kundengespräch mit Schadenaufnahme\"\r\nÜber einen Dialog wird der Kunde über seinen Namen und weitere Kriterien gesucht. In der Ergebnisliste wird ein Kunde ausgewählt und geöffnet. In der geöffneten Kundenübersicht werden allgemeine Informationen zu dem Kunden, wie Kontakthistorie, Angebote, Anträge und Verträge angezeigt.\r\nÜber einen Button öffnet sich ein neues Angebot, in dem das Geburtstagsdatum und die Anschrift des zuvor ausgewählten Kunden vorbelegt sind. Die Berechnen-Funktion wird aufgerufen und es erscheint ein Fehlerdialog mit mehreren Meldungen. Über die Fehlermeldungen kann zu den fehlerhaften Feldern navigiert werden.\r\n\r\nEine weitere Anwendungskomponente stellt die Funktion der Berufssuche zur Verfügung. Über diese wird ein Beruf im Angebot erfasst.\r\n\r\nNachdem der Anwender das Angebot gesichert hat, kopiert er das Angebot und öffnet damit beide Angebote parallel.\r\nZwischenzeitlich wird ein weiterer Kunde über die Kundensuche mittels der Vertragsnummer geöffnet. Zu diesem Vertrag erfolgt eine Schadenserfassung. Anschließend wird der erste Kunde als offener Vorgang erneut geöffnet. Alle offenen Vorgänge (Angebote) zu dem Kunden werden geschlossen - es erscheint der Hinweis auf ungesicherte Daten.\r\n\r\n### UseCase 2: \"Integration und Zusammenspiel von Anwendungen\"\r\nDie Aufgabenliste wird geöffnet und zeigt eine Liste aller Einträge an. Einem Eintrag kann ein Bezug (z.B. Vertrag, Schaden) zugeordnet sein. Ist ein Bezug zugeordnet, erhält der Anwender die Möglichkeit, in die entsprechende Anwendung zu verzweigen. Wird die geöffnete Anwendung geschlossen, wird erneut die Aufgabenliste dargestellt.\r\n\r\n### UseCase 3: \"Wizard\"\r\nInnerhalb der Vertragsanwendung soll eine Brieferstellung per Wizard möglich sein. Hierzu werden in einzelnen Schritten (Dokumentenauswahl, Empfängerauswahl, Zusammenfassung) die benötigten Informationen zur Brieferstellung zusammengetragen.\r\n\r\n# Github-Repos\r\n\r\nUm die unterschiedlichen Prototypen zu starten, benötigt man das Backend-Mock und die Repositories der jeweiligen Architektur. In den Repositories befinden sich README-Dateien als Anleitungen für die Installation und Ausführung der Anwendungen.\r\n\r\n## Backend-Mock:\r\n[https://github.com/LVM-IT/prototype-backend]()\r\n\r\n##RoCA Anwendungen:\r\n[Hauptanwendung]: (https://github.com/LVM-IT/roca-las)\r\n[Schadenanwendung]: (https://github.com/LVM-IT/roca-las-damage)\r\n[Aufgabenliste (Briefkasten)]: (https://github.com/LVM-IT/roca-las-postbox)\r\n[Briefschreibung (Wizard)]: (https://github.com/LVM-IT/roca-las-letter)\r\n[Allgemeine Assets]:(https://github.com/LVM-IT/roca-las-assets)\r\n\r\n##SPA Anwendungen\r\n\r\n[https://github.com/LVM-IT/spa-prototype](https://github.com/LVM-IT/spa-prototype)\r\n\r\nDarin enthalten:\r\n[Hauptanwendung]: (https://github.com/LVM-IT/spa-prototype/tree/master/src)\r\n[Vertraganwendung]: (https://github.com/LVM-IT/spa-prototype/tree/master/src-contract-app)\r\n[Berufssuche]: (https://github.com/LVM-IT/spa-prototype/tree/master/src-job-search-app)\r\n[Briefschreibung (Wizard)]: (https://github.com/LVM-IT/spa-prototype/tree/master/src-wizard-app)\r\n[Schufaanwendung]: (https://github.com/LVM-IT/spa-prototype/tree/master/src-schufa-app)\r\n[Allgemeine Bibliothek]: (https://github.com/LVM-IT/spa-prototype/tree/master/src-core)\r\n\r\n# Links\r\n\r\n[Diskussion zu SPA und RoCA bei Codecentric]()\r\n[Blog zu SPA und RoCA]()\r\n[Diskussion auf Twitter zu #roca und #spa]()\r\n\r\n# Ansprechpartner\r\n* [Carsten Piepel](https://twitter.com/cpiepel_de)\r\n* [Christian Grünberg](https://twitter.com/hillmann_h)\r\n* [Stephan Hillmann](https://twitter.com/gruenyC)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}